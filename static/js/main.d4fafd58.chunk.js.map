{"version":3,"sources":["Button.js","Table.js","constants/index.js","App.js","serviceWorker.js","index.js"],"names":["Button","this","props","onClick","className","children","type","React","Component","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","Sort","sortKey","activeSortKey","onSort","sortClass","classNames","Table","isSortReverse","onDismiss","sortedList","reverseSortedList","style","width","map","item","key","objectID","href","url","title","author","num_comments","points","DEFAULT_QUERY","PATH_BASE","Loading","ButtonWithLoading","isLoading","rest","App","state","result","searchKey","searchTerm","error","needsToSearchTopStories","bind","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","results","hits","page","oldHits","updatedHits","setState","id","filter","axios","then","data","catch","event","target","value","preventDefault","onChange","onSubmit","Search","input","focus","ref","el","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4fafd58.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Button extends React.Component {\n  render() {\n    const {onClick, className = '', children} = this.props;\n    return (\n      <button onClick={onClick} className={className} type=\"button\">\n        {children}\n      </button>\n    );\n  }\n}\n","import React from 'react';\nimport Button from './Button';\nimport {sortBy} from 'lodash';\nimport classNames from 'classnames';\n\nconst SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, 'title'),\n  AUTHOR: list => sortBy(list, 'author'),\n  COMMENTS: list => sortBy(list, 'comments').reverse(),\n  POINTS: list => sortBy(list, 'points').reverse(),\n};\n\nconst Sort = ({sortKey, activeSortKey, onSort, children}) => {\n  const sortClass = classNames('button-inline', {\n    'button-active': activeSortKey === sortKey,\n  });\n  return (\n    <Button onClick={() => onSort(sortKey)} className={sortClass}>\n      {children}\n    </Button>\n  );\n};\n\nconst Table = ({list, sortKey, isSortReverse, onSort, onDismiss}) => {\n  const sortedList = SORTS[sortKey](list);\n  const reverseSortedList = isSortReverse ? sortedList.reverse() : sortedList;\n  return (\n    <div className=\"table\">\n      <div className=\"table-header\">\n        <span style={{width: '40%'}}>\n          <Sort sortKey={'TITLE'} onSort={onSort} activeSortKey={sortKey}>\n            {' '}\n            Title\n          </Sort>\n        </span>\n        <span style={{width: '30%'}}>\n          <Sort sortKey={'AUTHOR'} onSort={onSort} activeSortKey={sortKey}>\n            Author\n          </Sort>\n        </span>\n        <span style={{width: '10%'}}>\n          <Sort sortKey={'COMMENTS'} onSort={onSort} activeSortKey={sortKey}>\n            Comments\n          </Sort>\n        </span>\n        <span style={{width: '10%'}}>\n          <Sort sortKey={'POINTS'} onSort={onSort} activeSortKey={sortKey}>\n            {' '}\n            Points\n          </Sort>\n        </span>\n        <span style={{width: '10%'}}>Archive</span>\n      </div>\n      {reverseSortedList.map(item => {\n        return (\n          <div key={item.objectID} className=\"table-row\">\n            <span style={{width: '40%'}}>\n              <a href={item.url}>{item.title}</a>\n            </span>\n            <span style={{width: '30%'}}>{item.author}</span>\n            <span style={{width: '10%'}}>{item.num_comments}</span>\n            <span style={{width: '10%'}}>{item.points}</span>\n            <span style={{width: '10%'}}>\n              <Button onClick={() => onDismiss(item.objectID)}>Dismiss</Button>\n            </span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Table;\n","export const DEFAULT_QUERY = 'redux';\nexport const DEFAULT_HPP = '100';\nexport const PATH_BASE = 'https://hn.algolia.com/api/v1';\nexport const PATH_SEARCH = '/search';\nexport const PARAM_SEARCH = 'query=';\nexport const PATH_PAGE = 'page=';\nexport const PARAM_HPP = 'hitsPerPage=';\n","import React from 'react';\nimport axios from 'axios';\nimport Table from './Table';\nimport Button from './Button';\nimport './App.css';\nimport {\n  DEFAULT_QUERY,\n  DEFAULT_HPP,\n  PATH_BASE,\n  PATH_SEARCH,\n  PARAM_SEARCH,\n  PATH_PAGE,\n  PARAM_HPP,\n} from './constants/index.js';\n\nconst Loading = () => <div>Loading...</div>;\nconst withLoading = Component => ({isLoading, ...rest}) =>\n  isLoading ? <Loading /> : <Component {...rest} />;\n\nconst ButtonWithLoading = withLoading(Button);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      result: null,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n      isLoading: false,\n      sortKey: 'NONE',\n      isSortReverse: false,\n    };\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSort = this.onSort.bind(this);\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n\n  setSearchTopStories(result) {\n    const {hits, page} = result;\n    const {searchKey, results} = this.state;\n\n    const oldHits =\n      results && results[searchKey] ? results[searchKey].hits : [];\n\n    const updatedHits = [...oldHits, ...hits];\n    this.setState({\n      results: {...results, [searchKey]: {hits: updatedHits, page}},\n      isLoading: false,\n    });\n  }\n\n  componentDidMount() {\n    const {searchTerm} = this.state;\n    this.setState({searchKey: searchTerm});\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  onDismiss(id) {\n    const {searchKey, results} = this.state;\n    const {hits, page} = results[searchKey];\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n    this.setState({\n      results: {...results, [searchKey]: {hits: updatedHits, page}},\n    });\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    this.setState({isLoading: true});\n    axios(\n      `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PATH_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`,\n    )\n      .then(result => this.setSearchTopStories(result.data))\n      .catch(error => this.setState({error}));\n  }\n\n  onSearchChange(event) {\n    this.setState({searchTerm: event.target.value});\n  }\n\n  onSearchSubmit(event) {\n    const {searchTerm} = this.state;\n    this.setState({searchKey: searchTerm});\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n    event.preventDefault();\n  }\n\n  onSort(sortKey) {\n    const isSortReverse =\n      this.state.sortKey === sortKey && !this.state.isSortReverse;\n    this.setState({sortKey, isSortReverse});\n  }\n\n  render() {\n    const {\n      searchTerm,\n      results,\n      searchKey,\n      error,\n      isLoading,\n      sortKey,\n      isSortReverse,\n    } = this.state;\n    const page =\n      (results && results[searchKey] && results[searchKey].page) || 0;\n    const list =\n      (results && results[searchKey] && results[searchKey].hits) || [];\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}>\n            Search\n          </Search>\n        </div>\n        {error ? (\n          <div className=\"interactions\">\n            <p>Something went wrong.</p>\n          </div>\n        ) : (\n          <Table\n            list={list}\n            sortKey={sortKey}\n            isSortReverse={isSortReverse}\n            onSort={this.onSort}\n            onDismiss={this.onDismiss}\n          />\n        )}\n        <div className=\"interactions\">\n          <ButtonWithLoading\n            isLoading={isLoading}\n            onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}>\n            More\n          </ButtonWithLoading>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nclass Search extends React.Component {\n  componentDidMount() {\n    if (this.input) {\n      this.input.focus();\n    }\n  }\n  render() {\n    const {value, onChange, onSubmit, children} = this.props;\n\n    return (\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n          ref={el => (this.input = el)}\n        />\n        <button type=\"submit\">{children}</button>\n      </form>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}