{"version":3,"sources":["Button.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Button","this","props","onClick","className","children","type","React","Component","Table","searchTerm","list","pattern","onDismiss","filter","item","title","toLowerCase","includes","map","key","objectID","style","width","href","url","author","num_comments","points","DEFAULT_QUERY","App","state","result","setSearchTopStories","bind","onSearchChange","setState","fetch","then","response","json","catch","error","id","updatedHits","hits","event","target","value","onChange","Search","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAEqBA,E,iLACT,IAAD,EACqCC,KAAKC,MAA1CC,EADA,EACAA,QADA,IACSC,iBADT,MACqB,GADrB,EACyBC,EADzB,EACyBA,SAChC,OACE,4BAAQF,QAASA,EAASC,UAAWA,EAAWE,KAAK,UAClDD,O,GAL2BE,IAAMC,WCIrBC,E,iLACT,IAJOC,EAIR,EAC4BT,KAAKC,MAAjCS,EADA,EACAA,KAAMC,EADN,EACMA,QAASC,EADf,EACeA,UACtB,OACE,yBAAKT,UAAU,SACZO,EAAKG,QARKJ,EAQaE,EARC,SAAAG,GAAI,OACnCA,EAAKC,MAAMC,cAAcC,SAASR,EAAWO,kBAOLE,KAAI,SAAAJ,GACpC,OACE,yBAAKK,IAAKL,EAAKM,SAAUjB,UAAU,aACjC,0BAAMkB,MAAO,CAACC,MAAO,QACnB,uBAAGC,KAAMT,EAAKU,KAAMV,EAAKC,QAE3B,0BAAMM,MAAO,CAACC,MAAO,QAASR,EAAKW,QACnC,0BAAMJ,MAAO,CAACC,MAAO,QAASR,EAAKY,cACnC,0BAAML,MAAO,CAACC,MAAO,QAASR,EAAKa,QACnC,0BAAMN,MAAO,CAACC,MAAO,QACnB,kBAAC,EAAD,CAAQpB,QAAS,kBAAMU,EAAUE,EAAKM,YAAtC,qB,GAfmBd,IAAMC,W,+jBCFzC,IAAMqB,EAAgB,QAkEPC,E,YA3Db,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KAED6B,MAAQ,CACXC,OAAQ,KACRtB,WAAYmB,GAEd,EAAKI,oBAAsB,EAAKA,oBAAoBC,KAAzB,gBAC3B,EAAKrB,UAAY,EAAKA,UAAUqB,KAAf,gBACjB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBATL,E,iFAYCF,GAClB/B,KAAKmC,SAAS,CAACJ,a,0CAGI,IAAD,OACXtB,EAAcT,KAAK8B,MAAnBrB,WAEP2B,MAAM,GAAD,OAxBS,iCAwBT,OAvBW,UAuBX,YAtBY,UAsBZ,OAA8C3B,IAChD4B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAN,GAAM,OAAI,EAAKC,oBAAoBD,MACxCS,OAAM,SAAAC,GAAK,OAAIA,O,gCAGVC,GACR,IACMC,EAAc3C,KAAK8B,MAAMC,OAAOa,KAAK/B,QAD3B,SAAAC,GAAI,OAAIA,EAAKM,WAAasB,KAE1C1C,KAAKmC,SAAS,CACZJ,OAAO,EAAD,GAAM/B,KAAK8B,MAAMC,OAAjB,CAAyBa,KAAMD,Q,qCAI1BE,GACb7C,KAAKmC,SAAS,CAAC1B,WAAYoC,EAAMC,OAAOC,U,+BAGhC,IAAD,EACsB/C,KAAK8B,MAA3BrB,EADA,EACAA,WAAYsB,EADZ,EACYA,OAEnB,OACE,yBAAK5B,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAQ4C,MAAOtC,EAAYuC,SAAUhD,KAAKkC,gBAA1C,WAIDH,GACC,kBAAC,EAAD,CACErB,KAAMqB,EAAOa,KACbjC,QAASF,EACTG,UAAWZ,KAAKY,iB,GApDVN,IAAMC,WA8DlB0C,EAAS,SAAC,GAAD,IAAEF,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAU5C,EAAnB,EAAmBA,SAAnB,OACb,8BACGA,EACD,2BAAOC,KAAK,OAAO0C,MAAOA,EAAOC,SAAUA,MC/D3BE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.ebedda2d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Button extends React.Component {\n  render() {\n    const {onClick, className = '', children} = this.props;\n    return (\n      <button onClick={onClick} className={className} type=\"button\">\n        {children}\n      </button>\n    );\n  }\n}\n","import React from 'react';\nimport Button from './Button';\n\nconst isSearched = searchTerm => item =>\n  item.title.toLowerCase().includes(searchTerm.toLowerCase());\n\nexport default class Table extends React.Component {\n  render() {\n    const {list, pattern, onDismiss} = this.props;\n    return (\n      <div className=\"table\">\n        {list.filter(isSearched(pattern)).map(item => {\n          return (\n            <div key={item.objectID} className=\"table-row\">\n              <span style={{width: '40%'}}>\n                <a href={item.url}>{item.title}</a>\n              </span>\n              <span style={{width: '30%'}}>{item.author}</span>\n              <span style={{width: '10%'}}>{item.num_comments}</span>\n              <span style={{width: '10%'}}>{item.points}</span>\n              <span style={{width: '10%'}}>\n                <Button onClick={() => onDismiss(item.objectID)}>\n                  Dismiss\n                </Button>\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Table from './Table';\nimport './App.css';\n\nconst DEFAULT_QUERY = 'redux';\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst PATH_SEARCH = '/search';\nconst PARAM_SEARCH = 'query=';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      result: null,\n      searchTerm: DEFAULT_QUERY,\n    };\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n  }\n\n  setSearchTopStories(result) {\n    this.setState({result});\n  }\n\n  componentDidMount() {\n    const {searchTerm} = this.state;\n\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}`)\n      .then(response => response.json())\n      .then(result => this.setSearchTopStories(result))\n      .catch(error => error);\n  }\n\n  onDismiss(id) {\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = this.state.result.hits.filter(isNotId);\n    this.setState({\n      result: {...this.state.result, hits: updatedHits},\n    });\n  }\n\n  onSearchChange(event) {\n    this.setState({searchTerm: event.target.value});\n  }\n\n  render() {\n    const {searchTerm, result} = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search value={searchTerm} onChange={this.onSearchChange}>\n            Search\n          </Search>\n        </div>\n        {result && (\n          <Table\n            list={result.hits}\n            pattern={searchTerm}\n            onDismiss={this.onDismiss}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst Search = ({value, onChange, children}) => (\n  <form>\n    {children}\n    <input type=\"text\" value={value} onChange={onChange} />\n  </form>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}