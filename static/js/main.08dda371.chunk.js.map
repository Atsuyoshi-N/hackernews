{"version":3,"sources":["Button.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["Button","this","props","onClick","className","children","type","React","Component","Table","list","onDismiss","map","item","key","objectID","style","width","href","url","title","author","num_comments","points","DEFAULT_QUERY","PATH_BASE","App","state","result","searchKey","searchTerm","error","needsToSearchTopStories","bind","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","results","hits","page","oldHits","updatedHits","setState","id","filter","axios","then","data","catch","event","target","value","preventDefault","onChange","onSubmit","Search","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08dda371.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Button extends React.Component {\n  render() {\n    const {onClick, className = '', children} = this.props;\n    return (\n      <button onClick={onClick} className={className} type=\"button\">\n        {children}\n      </button>\n    );\n  }\n}\n","import React from 'react';\nimport Button from './Button';\n\nconst Table = ({list, onDismiss}) => {\n  return (\n    <div className=\"table\">\n      {list.map(item => {\n        return (\n          <div key={item.objectID} className=\"table-row\">\n            <span style={{width: '40%'}}>\n              <a href={item.url}>{item.title}</a>\n            </span>\n            <span style={{width: '30%'}}>{item.author}</span>\n            <span style={{width: '10%'}}>{item.num_comments}</span>\n            <span style={{width: '10%'}}>{item.points}</span>\n            <span style={{width: '10%'}}>\n              <Button onClick={() => onDismiss(item.objectID)}>Dismiss</Button>\n            </span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport axios from 'axios';\nimport Table from './Table';\nimport Button from './Button';\nimport './App.css';\n\nconst DEFAULT_QUERY = 'redux';\nconst DEFAULT_HPP = '100';\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst PATH_SEARCH = '/search';\nconst PARAM_SEARCH = 'query=';\nconst PATH_PAGE = 'page=';\nconst PARAM_HPP = 'hitsPerPage=';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      result: null,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n    };\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n\n  setSearchTopStories(result) {\n    const {hits, page} = result;\n    const {searchKey, results} = this.state;\n\n    const oldHits =\n      results && results[searchKey] ? results[searchKey].hits : [];\n\n    const updatedHits = [...oldHits, ...hits];\n    this.setState({\n      results: {...results, [searchKey]: {hits: updatedHits, page}},\n    });\n  }\n\n  componentDidMount() {\n    const {searchTerm} = this.state;\n    this.setState({searchKey: searchTerm});\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  onDismiss(id) {\n    const {searchKey, results} = this.state;\n    const {hits, page} = results[searchKey];\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n    this.setState({\n      results: {...results, [searchKey]: {hits: updatedHits, page}},\n    });\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    axios(\n      `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PATH_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`,\n    )\n      .then(result => this.setSearchTopStories(result.data))\n      .catch(error => this.setState({error}));\n  }\n\n  onSearchChange(event) {\n    this.setState({searchTerm: event.target.value});\n  }\n\n  onSearchSubmit(event) {\n    const {searchTerm} = this.state;\n    this.setState({searchKey: searchTerm});\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n    event.preventDefault();\n  }\n\n  render() {\n    const {searchTerm, results, searchKey, error} = this.state;\n    const page =\n      (results && results[searchKey] && results[searchKey].page) || 0;\n    const list =\n      (results && results[searchKey] && results[searchKey].hits) || [];\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}>\n            Search\n          </Search>\n        </div>\n        {error ? (\n          <div className=\"interactions\">\n            <p>Something went wrong.</p>\n          </div>\n        ) : (\n          <Table list={list} onDismiss={this.onDismiss} />\n        )}\n        <div className=\"interactions\">\n          <Button\n            onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}>\n            More\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst Search = ({value, onChange, onSubmit, children}) => (\n  <form onSubmit={onSubmit}>\n    <input type=\"text\" value={value} onChange={onChange} />\n    <button type=\"submit\">{children}</button>\n  </form>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}